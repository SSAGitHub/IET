	import org.apache.tools.ant.filters.*
import com.github.zafarkhaja.semver.Version
import java.util.regex.Matcher
import static String.format

buildscript {
	repositories { mavenCentral()        }

	dependencies { classpath 'net.saliman:gradle-cobertura-plugin:2.2.4' }
}

plugins {
	id 'pl.allegro.tech.build.axion-release' version '1.5.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply from:   'groovy.gradle'

scmVersion {
	tag {
	  prefix = 'ver'
	  initialVersion = {config, position -> '1.0.0' }
	}

	branchVersionIncrementer = [
	  'master.*' : "incrementMinor",
	  'release.*' : { context -> if (context.currentVersion.preReleaseVersion) {
		  Matcher matcher = context.currentVersion.preReleaseVersion =~ /^(.*?)(\d+)$/
		  if (matcher.matches()) {
			  long nextNumber = Long.parseLong(matcher.group(2)) + 1
			  String nextNumberPadded = format("%0" + matcher.group(2).length() + "d", nextNumber);
			  String nextPreReleaseVersion = matcher.group(1) + nextNumberPadded
	  
			  return new Version.Builder()
					  .setNormalVersion(context.currentVersion.normalVersion)
					  .setPreReleaseVersion(nextPreReleaseVersion)
					  .build();
		  }
	  }
	  return context.currentVersion.incrementMinorVersion()
	  
	  },
	  
	  'hotfix.*' : "incrementPatch",
	  'development.*' : "incrementMinor"
	  ]

	repository {
			customKey = project.file(ietReleaseKeyFile)
			directory = project.file('../')
	}
}

project.version = scmVersion.version

repositories {
	mavenCentral()


	maven {
		url "http://nexus.theiet.org/nexus/content/groups/public"
		credentials {
			username ietMavenUser
			password ietMavenPassword
		}
	}
}

sourceSets {
	integrationTest {
		java.srcDir 'src/integration-test/java'
		resources.srcDir 'src/integration-test/resources'
	}
}

 configurations {
	all {resolutionStrategy.cacheChangingModulesFor 0, 'seconds'}
	rsuitePlugin
	pluginJars{ transitive = false }

	testCompile
	
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}


eclipse.classpath {
	plusConfigurations += [ configurations.integrationTestCompile ]
   }

dependencies {

	compile 'com.rsicms:rsuite-api:4.1.17'
	compile 'log4j:log4j:1.2.17'
	compile 'commons-lang:commons-lang:2.4'


	compile 'commons-io:commons-io:1.4'


	compile 'com.rsicms:rsuite-tools-zip:20090327'
	compile 'com.rsicms:jbpm-rsuite:20090317'

	compile 'net.sf.saxon:Saxon-HE:9.1.0.7'
	compile 'net.sf.saxon:saxon9-s9api:9.1.0.7'
	compile 'net.sf.saxon:saxon9-xpath:9.1.0.7'
	compile 'net.sf.saxon:saxon9-dom:9.1.0.7'

	compile 'com.rsicms.oxygen:rsuite-oxygen-applet-integration-api:4.0.7_oxy15.2_v1.5.15qa7'
	compile 'com.oxygenxml:oxygen:15.2'

	compile 'commons-logging:commons-logging:1.1'
	compile 'commons-net:commons-net:1.4.1'
	compile 'hibernate:hibernate:3'

	compile 'joda-time:joda-time:2.1'

	pluginJars 'joda-time:joda-time:2.1'

	compile 'org.json:org.json:2.0'
	compile 'org.apache.pdfbox:pdfbox:1.8.0'
	compile 'commons-fileupload:commons-fileupload:1.2.1'

	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-core:1.9.5'
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	testCompile 'org.powermock:powermock-mockito-release-full:1.5.4'
	testCompile 'log4j:log4j:1.2.17'
    testCompile 'org.xmlunit:xmlunit-matchers:2.3.0'

	
	integrationTestCompile configurations.compile
	integrationTestCompile configurations.testCompile
	
	integrationTestRuntime configurations.runtime
	integrationTestRuntime configurations.testRuntime
	
	integrationTestCompile sourceSets.main.output
	integrationTestCompile sourceSets.test.output
	integrationTestCompile 'xerces:xercesImpl:2.11.0'
	integrationTestCompile 'xml-resolver:xml-resolver:1.2'
	integrationTestCompile 'com.rsicms.dita4publishers:dita4publishers-rsuite-plugin:0.9.19RC12Issue139'
}


jar {
	baseName = rootProject.name
	version = null

	from('src/main') {
		exclude ("java/**")
		exclude ("resources/**")
	}

	from(configurations.pluginJars) { into '/' }
	
	from (project(':oxygen-integration').createOxygenIntegration.outputs.files) { into('/WebContent/oxygen') }
	from (project(':oxygen-framework-dita').createFramework.outputs.files)  { into('/WebContent/oxygen') }
	from (project(':oxygen-framework-jats').createFramework.outputs.files)  { into('/WebContent/oxygen') }
} 

task buildPluginPackage(dependsOn: [	
	'test', 'jar'
], type: Zip) {

	baseName = rootProject.name
	from('setup') {
		include '**/*'
		into('setup')
	}

	from(configurations.runtime.allArtifacts.files) { into('plugin') }

	from('.') { include('deploy.gradle') }
}

artifacts { rsuitePlugin buildPluginPackage }


task deploy(type: Upload, dependsOn: buildPluginPackage)  {
	description = "MAIN TASK - creates package and uploads to the maven repository"
	configuration = configurations.rsuitePlugin

	repositories {
		mavenDeployer {
			repository(url: "http://nexus.theiet.org/nexus/content/repositories/releases") {
				authentication(userName: ietMavenUser, password: ietMavenPassword)
			}

			snapshotRepository(url: 'http://nexus.theiet.org/nexus/content/repositories/snapshots') {
				authentication(userName: ietMavenUser, password: ietMavenPassword);
			}
			pom.groupId = "org.iet"
		}
	}
}

task integrationTest(type: Test) {
	group = LifecycleBasePlugin.VERIFICATION_GROUP
	description = 'Runs the integration tests.'

	maxHeapSize = '1024m'

	testClassesDirs = sourceSets.integrationTest.output
	classpath = sourceSets.integrationTest.runtimeClasspath

	binResultsDir = file("$buildDir/integration-test-results/binary/integTest")

	reports {
		html.destination = file("$buildDir/reports/integration-test")
		junitXml.destination = file("$buildDir/integration-test-results")
	}

	mustRunAfter tasks.test
}

defaultTasks 'deploy'

task wrapper(type: Wrapper) { gradleVersion = '4.1' }
